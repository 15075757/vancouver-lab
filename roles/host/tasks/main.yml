- name: create br-labnet bridge
  template:
    src: ifcfg-br-labnet.j2
    dest: /etc/sysconfig/network-scripts/ifcfg-br-labnet
    owner: root
    group: root
    mode: 0644
    backup: no
  when: destroy_environment is undefined
  notify: restart network

- name: add interface to br-labnet
  template:
    src: ifcfg-interface.j2
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    owner: root
    group: root
    mode: 0644
    backup: no
  when: "destroy_environment is undefined and ansible_default_ipv4.interface != 'br-labnet'"
  notify: restart network


- name: flush the handlers so the ip moves to the bridge
  meta: flush_handlers

- name: Wait for SSH on the Instance # must run from local host because host can't reach instance with macvtap network
  become: no
  wait_for:
    port: 22
    host: "{{ inventory_hostname }}"
    search_regex: OpenSSH
    delay: 5
    timeout: 300
  delegate_to: localhost
  when: destroy_environment is undefined

- name: install role packages
  yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ role_packages }}"

- name: create openstack repo files
  copy:
    src: "{{ item }}"
    dest: /etc/yum.repos.d/
    owner: root
    group: root
    mode: 0644
  with_items:
  - CentOS-QEMU-EV.repo
  - CentOS-OpenStack-queens.repo

- name: create openstack repo gpg files
  copy:
    src: "{{ item }}"
    dest: /etc/pki/rpm-gpg/
    owner: root
    group: root
    mode: 0644
  with_items:
  - RPM-GPG-KEY-CentOS-SIG-Virtualization
  - RPM-GPG-KEY-CentOS-SIG-Cloud

- name: Start / Enable libvirtd
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: Start / Enable firewalld
  service:
    name: firewalld
    state: started
    enabled: yes

- name: open ports for vbmc
  firewalld:
    port: 20100-21100/udp
    permanent: true
    state: enabled
  notify: reload firewalld

# build networks
- name: define OSP network for each environment
  virt_net:
    command: define
    name: "env-{{ item }}-ospnet"
    xml: '{{ lookup("template", "osp-network.j2") }}'
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is undefined

- name: start OSP network for each environment
  virt_net:
    state: active
    name: "env-{{ item }}-ospnet"
    autostart: yes
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is undefined

- name: set autostart for OSP network for each environment
  virt_net:
    name: "env-{{ item }}-ospnet"
    autostart: yes
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is undefined

- name: define Contrail network for each environment
  virt_net:
    command: define
    name: "env-{{ item }}-contrailnet"
    xml: '{{ lookup("template", "contrail-network.j2") }}'
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is undefined

- name: start Contrail network for each environment
  virt_net:
    state: active
    name: "env-{{ item }}-contrailnet"
    autostart: yes
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is undefined

- name: set autostart for  Contrail network for each environment
  virt_net:
    name: "env-{{ item }}-contrailnet"
    autostart: yes
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is undefined

# creeate and start pool for sdb, which should be mounted on /virt-sdb
- name: define virt-sdb-images
  virt_pool:
    command: define
    name: virt-sdb-images
    xml: '{{ lookup("template", "virt-sdb-images.j2") }}'
  when: destroy_environment is undefined
  ignore_errors: true

- name: build virt-sdb-images if it does not exist
  virt_pool:
    name: virt-sdb-images
    command: build
  when: destroy_environment is undefined

- name: start virt-sdb-images
  virt_pool:
    name: virt-sdb-images
    state: active
  when: destroy_environment is undefined

- name: set virt-sdb-images to autostart
  virt_pool:
    name: virt-sdb-images
    autostart: yes
  when: destroy_environment is undefined

# update packages on host
- name: upgrade all packages
  yum: name=* state=latest
  when: destroy_environment is undefined

- name: Check for reboot hint.
  shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
  ignore_errors: true
  register: reboot_hint
  when: destroy_environment is undefined

- name: Rebooting ...
  command: shutdown -r now "Reboot required for updated kernel"
  async: 0
  poll: 0
  sudo: true
  ignore_errors: true
  when: destroy_environment is undefined and reboot_hint.stdout.find("reboot") != -1
  register: rebooting

- name: Wait for SSH on the Host
  become: no
  wait_for:
    port: 22
    host: "{{ inventory_hostname }}"
    search_regex: OpenSSH
    delay: 120
    timeout: 600
  delegate_to: localhost
  when: destroy_environment is undefined and rebooting|changed

- name: Set Host CPU profile to performance
  command: cpupower frequency-set -g performance
  when: destroy_environment is undefined

# destroy networks
- name: remove OSP network for each environment
  virt_net:
    state: absent
    name: "env-{{ item }}-ospnet"
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is defined and destroy_environment

- name: remove Contrail network for each environment
  virt_net:
    state: absent
    name: "env-{{ item }}-contrailnet"
  with_sequence: start=1 end={{ instances }}
  when: destroy_environment is defined and destroy_environment

- name: Set Host CPU profile to powersave
  command: cpupower frequency-set -g powersave
  when: destroy_environment is defined and destroy_environment